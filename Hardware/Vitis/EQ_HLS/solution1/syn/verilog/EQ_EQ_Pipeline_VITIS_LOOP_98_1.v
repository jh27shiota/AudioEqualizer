// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module EQ_EQ_Pipeline_VITIS_LOOP_98_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_lshr_f6_cast,
        buf_re_V_address0,
        buf_re_V_ce0,
        buf_re_V_we0,
        buf_re_V_d0,
        buf_re_V_q0,
        buf_im_V_address0,
        buf_im_V_ce0,
        buf_im_V_we0,
        buf_im_V_d0,
        buf_im_V_q0,
        trunc_ln10
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] p_lshr_f6_cast;
output  [9:0] buf_re_V_address0;
output   buf_re_V_ce0;
output   buf_re_V_we0;
output  [39:0] buf_re_V_d0;
input  [39:0] buf_re_V_q0;
output  [9:0] buf_im_V_address0;
output   buf_im_V_ce0;
output   buf_im_V_we0;
output  [39:0] buf_im_V_d0;
input  [39:0] buf_im_V_q0;
input  [9:0] trunc_ln10;

reg ap_idle;
reg[9:0] buf_re_V_address0;
reg buf_re_V_ce0;
reg buf_re_V_we0;
reg[39:0] buf_re_V_d0;
reg[9:0] buf_im_V_address0;
reg buf_im_V_ce0;
reg buf_im_V_we0;
reg[39:0] buf_im_V_d0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln98_fu_172_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [9:0] i_5_reg_346;
reg   [0:0] icmp_ln98_reg_352;
wire   [2:0] mode_fu_256_p3;
reg   [2:0] mode_reg_356;
reg   [9:0] buf_re_V_addr_2_reg_360;
reg   [9:0] buf_im_V_addr_2_reg_365;
wire   [9:0] buf_re_V_addr_gep_fu_92_p3;
reg   [9:0] buf_re_V_addr_reg_370;
wire   [9:0] buf_im_V_addr_gep_fu_100_p3;
reg   [9:0] buf_im_V_addr_reg_375;
reg   [9:0] buf_re_V_addr_3_reg_380;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [9:0] buf_im_V_addr_3_reg_385;
reg   [9:0] buf_re_V_addr_1_reg_390;
reg   [9:0] buf_im_V_addr_1_reg_395;
wire   [63:0] zext_ln98_fu_178_p1;
wire   [63:0] zext_ln1534_fu_288_p1;
wire   [63:0] zext_ln1500_fu_294_p1;
reg   [9:0] i_fu_50;
wire   [9:0] add_ln98_fu_324_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_5;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire  signed [39:0] sext_ln1534_fu_264_p1;
wire   [39:0] r_V_fu_274_p2;
wire  signed [39:0] sext_ln1534_2_fu_300_p1;
wire   [39:0] r_V_23_fu_310_p2;
wire  signed [39:0] sext_ln1534_1_fu_269_p1;
wire   [39:0] r_V_22_fu_281_p2;
wire  signed [39:0] sext_ln1534_3_fu_305_p1;
wire   [39:0] r_V_24_fu_317_p2;
wire   [0:0] icmp_ln108_fu_186_p2;
wire   [0:0] icmp_ln104_fu_204_p2;
wire   [0:0] icmp_ln112_fu_192_p2;
wire   [0:0] xor_ln108_fu_216_p2;
wire   [0:0] and_ln112_fu_222_p2;
wire   [0:0] and_ln108_fu_210_p2;
wire   [0:0] or_ln112_fu_236_p2;
wire   [2:0] select_ln112_fu_228_p3;
wire   [0:0] icmp_ln116_fu_198_p2;
wire   [0:0] or_ln112_1_fu_250_p2;
wire   [2:0] select_ln112_1_fu_242_p3;
wire   [38:0] grp_fu_140_p4;
wire   [38:0] grp_fu_150_p4;
wire   [9:0] grp_fu_160_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_done_reg = 1'b0;
end

EQ_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_50 <= 10'd1;
    end else if (((icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_50 <= add_ln98_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf_im_V_addr_1_reg_395 <= zext_ln1500_fu_294_p1;
        buf_re_V_addr_1_reg_390 <= zext_ln1500_fu_294_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_fu_256_p3 == 3'd7) & (icmp_ln98_fu_172_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_im_V_addr_2_reg_365 <= zext_ln98_fu_178_p1;
        buf_re_V_addr_2_reg_360 <= zext_ln98_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf_im_V_addr_3_reg_385 <= zext_ln1534_fu_288_p1;
        buf_re_V_addr_3_reg_380 <= zext_ln1534_fu_288_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_fu_256_p3 == 3'd2) & (icmp_ln98_fu_172_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_im_V_addr_reg_375 <= zext_ln98_fu_178_p1;
        buf_re_V_addr_reg_370 <= zext_ln98_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_5_reg_346 <= ap_sig_allocacmp_i_5;
        icmp_ln98_reg_352 <= icmp_ln98_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_172_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_reg_356 <= mode_fu_256_p3;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln98_fu_172_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_5 = 10'd1;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_50;
    end
end

always @ (*) begin
    if (((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_im_V_address0 = buf_im_V_addr_1_reg_395;
    end else if (((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_im_V_address0 = buf_im_V_addr_3_reg_385;
    end else if (((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf_im_V_address0 = zext_ln1500_fu_294_p1;
    end else if (((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf_im_V_address0 = zext_ln1534_fu_288_p1;
    end else if (((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        buf_im_V_address0 = buf_im_V_addr_reg_375;
    end else if (((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        buf_im_V_address0 = buf_im_V_addr_2_reg_365;
    end else if (((mode_fu_256_p3 == 3'd2) & (icmp_ln98_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_im_V_address0 = buf_im_V_addr_gep_fu_100_p3;
    end else if (((mode_fu_256_p3 == 3'd7) & (icmp_ln98_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_im_V_address0 = zext_ln98_fu_178_p1;
    end else begin
        buf_im_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((mode_fu_256_p3 == 3'd2) & (icmp_ln98_fu_172_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((mode_fu_256_p3 == 3'd7) & (icmp_ln98_fu_172_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        buf_im_V_ce0 = 1'b1;
    end else begin
        buf_im_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln98_reg_352 == 1'd1)) begin
        if (((mode_reg_356 == 3'd2) & (1'b1 == ap_CS_fsm_state4))) begin
            buf_im_V_d0 = r_V_24_fu_317_p2;
        end else if (((mode_reg_356 == 3'd7) & (1'b1 == ap_CS_fsm_state4))) begin
            buf_im_V_d0 = sext_ln1534_3_fu_305_p1;
        end else if (((mode_reg_356 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
            buf_im_V_d0 = r_V_22_fu_281_p2;
        end else if (((mode_reg_356 == 3'd7) & (1'b1 == ap_CS_fsm_state2))) begin
            buf_im_V_d0 = sext_ln1534_1_fu_269_p1;
        end else begin
            buf_im_V_d0 = 'bx;
        end
    end else begin
        buf_im_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        buf_im_V_we0 = 1'b1;
    end else begin
        buf_im_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_re_V_address0 = buf_re_V_addr_1_reg_390;
    end else if (((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_re_V_address0 = buf_re_V_addr_3_reg_380;
    end else if (((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf_re_V_address0 = zext_ln1500_fu_294_p1;
    end else if (((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf_re_V_address0 = zext_ln1534_fu_288_p1;
    end else if (((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        buf_re_V_address0 = buf_re_V_addr_reg_370;
    end else if (((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        buf_re_V_address0 = buf_re_V_addr_2_reg_360;
    end else if (((mode_fu_256_p3 == 3'd2) & (icmp_ln98_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_re_V_address0 = buf_re_V_addr_gep_fu_92_p3;
    end else if (((mode_fu_256_p3 == 3'd7) & (icmp_ln98_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_re_V_address0 = zext_ln98_fu_178_p1;
    end else begin
        buf_re_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((mode_fu_256_p3 == 3'd2) & (icmp_ln98_fu_172_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((mode_fu_256_p3 == 3'd7) & (icmp_ln98_fu_172_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        buf_re_V_ce0 = 1'b1;
    end else begin
        buf_re_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln98_reg_352 == 1'd1)) begin
        if (((mode_reg_356 == 3'd2) & (1'b1 == ap_CS_fsm_state4))) begin
            buf_re_V_d0 = r_V_23_fu_310_p2;
        end else if (((mode_reg_356 == 3'd7) & (1'b1 == ap_CS_fsm_state4))) begin
            buf_re_V_d0 = sext_ln1534_2_fu_300_p1;
        end else if (((mode_reg_356 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
            buf_re_V_d0 = r_V_fu_274_p2;
        end else if (((mode_reg_356 == 3'd7) & (1'b1 == ap_CS_fsm_state2))) begin
            buf_re_V_d0 = sext_ln1534_fu_264_p1;
        end else begin
            buf_re_V_d0 = 'bx;
        end
    end else begin
        buf_re_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd7) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((mode_reg_356 == 3'd2) & (icmp_ln98_reg_352 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        buf_re_V_we0 = 1'b1;
    end else begin
        buf_re_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln98_fu_172_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln98_fu_324_p2 = (i_5_reg_346 + 10'd1);

assign and_ln108_fu_210_p2 = (icmp_ln108_fu_186_p2 & icmp_ln104_fu_204_p2);

assign and_ln112_fu_222_p2 = (xor_ln108_fu_216_p2 & icmp_ln112_fu_192_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buf_im_V_addr_gep_fu_100_p3 = zext_ln98_fu_178_p1;

assign buf_re_V_addr_gep_fu_92_p3 = zext_ln98_fu_178_p1;

assign grp_fu_140_p4 = {{buf_re_V_q0[39:1]}};

assign grp_fu_150_p4 = {{buf_im_V_q0[39:1]}};

assign grp_fu_160_p2 = (trunc_ln10 - i_5_reg_346);

assign icmp_ln104_fu_204_p2 = ((ap_sig_allocacmp_i_5 != 10'd1) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_186_p2 = ((ap_sig_allocacmp_i_5 < 10'd5) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_192_p2 = ((ap_sig_allocacmp_i_5 < 10'd17) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_198_p2 = ((ap_sig_allocacmp_i_5 < 10'd43) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_172_p2 = ((ap_sig_allocacmp_i_5 < p_lshr_f6_cast) ? 1'b1 : 1'b0);

assign mode_fu_256_p3 = ((or_ln112_1_fu_250_p2[0:0] == 1'b1) ? select_ln112_1_fu_242_p3 : 3'd7);

assign or_ln112_1_fu_250_p2 = (or_ln112_fu_236_p2 | icmp_ln116_fu_198_p2);

assign or_ln112_fu_236_p2 = (and_ln112_fu_222_p2 | and_ln108_fu_210_p2);

assign r_V_22_fu_281_p2 = buf_im_V_q0 << 40'd1;

assign r_V_23_fu_310_p2 = buf_re_V_q0 << 40'd1;

assign r_V_24_fu_317_p2 = buf_im_V_q0 << 40'd1;

assign r_V_fu_274_p2 = buf_re_V_q0 << 40'd1;

assign select_ln112_1_fu_242_p3 = ((or_ln112_fu_236_p2[0:0] == 1'b1) ? select_ln112_fu_228_p3 : 3'd2);

assign select_ln112_fu_228_p3 = ((and_ln112_fu_222_p2[0:0] == 1'b1) ? 3'd1 : 3'd7);

assign sext_ln1534_1_fu_269_p1 = $signed(grp_fu_150_p4);

assign sext_ln1534_2_fu_300_p1 = $signed(grp_fu_140_p4);

assign sext_ln1534_3_fu_305_p1 = $signed(grp_fu_150_p4);

assign sext_ln1534_fu_264_p1 = $signed(grp_fu_140_p4);

assign xor_ln108_fu_216_p2 = (icmp_ln108_fu_186_p2 ^ 1'd1);

assign zext_ln1500_fu_294_p1 = grp_fu_160_p2;

assign zext_ln1534_fu_288_p1 = grp_fu_160_p2;

assign zext_ln98_fu_178_p1 = ap_sig_allocacmp_i_5;

endmodule //EQ_EQ_Pipeline_VITIS_LOOP_98_1
