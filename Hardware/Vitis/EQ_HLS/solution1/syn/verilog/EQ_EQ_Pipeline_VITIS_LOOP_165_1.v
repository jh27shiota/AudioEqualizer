// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module EQ_EQ_Pipeline_VITIS_LOOP_165_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_TVALID,
        in_stream_TDATA,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        buf_re_V_address0,
        buf_re_V_ce0,
        buf_re_V_we0,
        buf_re_V_d0,
        buf_im_V_address0,
        buf_im_V_ce0,
        buf_im_V_we0,
        buf_im_V_d0,
        count_out,
        count_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_stream_TVALID;
input  [31:0] in_stream_TDATA;
output   in_stream_TREADY;
input  [3:0] in_stream_TKEEP;
input  [3:0] in_stream_TSTRB;
input  [1:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [4:0] in_stream_TID;
input  [5:0] in_stream_TDEST;
output  [9:0] buf_re_V_address0;
output   buf_re_V_ce0;
output   buf_re_V_we0;
output  [39:0] buf_re_V_d0;
output  [9:0] buf_im_V_address0;
output   buf_im_V_ce0;
output   buf_im_V_we0;
output  [39:0] buf_im_V_d0;
output  [10:0] count_out;
output   count_out_ap_vld;

reg ap_idle;
reg in_stream_TREADY;
reg buf_re_V_ce0;
reg buf_re_V_we0;
reg buf_im_V_ce0;
reg buf_im_V_we0;
reg count_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] and_ln165_fu_165_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] phi_ln165_reg_132;
reg   [0:0] and_ln165_reg_280;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln161_fu_177_p1;
reg   [63:0] zext_ln161_reg_284;
wire   [17:0] select_ln1349_fu_250_p3;
reg   [17:0] select_ln1349_reg_289;
wire   [0:0] xor_ln165_fu_258_p2;
reg   [0:0] ap_phi_mux_phi_ln165_phi_fu_135_p4;
wire    ap_loop_init;
reg   [10:0] count_fu_76;
wire   [10:0] add_ln176_fu_171_p2;
reg   [10:0] ap_sig_allocacmp_count_1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_fu_151_p3;
wire   [0:0] xor_ln165_1_fu_159_p2;
wire   [23:0] trunc_ln884_fu_190_p1;
wire   [39:0] t_V_fu_194_p3;
wire   [39:0] sub_ln1349_fu_210_p2;
wire   [16:0] trunc_ln1349_1_fu_216_p4;
wire   [17:0] zext_ln1349_fu_226_p1;
wire   [16:0] trunc_ln1349_2_fu_236_p4;
wire   [0:0] tmp_19_fu_202_p3;
wire   [17:0] sub_ln1349_1_fu_230_p2;
wire   [17:0] zext_ln1349_1_fu_246_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

EQ_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((1'd1 == and_ln165_fu_165_p2) & (ap_start_int == 1'b1))) begin
            count_fu_76 <= add_ln176_fu_171_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            count_fu_76 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln165_reg_280 <= and_ln165_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln165_fu_165_p2) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln165_reg_132 <= xor_ln165_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln165_fu_165_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln1349_reg_289 <= select_ln1349_fu_250_p3;
        zext_ln161_reg_284[10 : 0] <= zext_ln161_fu_177_p1[10 : 0];
    end
end

always @ (*) begin
    if (((1'd0 == and_ln165_fu_165_p2) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_phi_mux_phi_ln165_phi_fu_135_p4 = 1'd1;
    end else begin
        ap_phi_mux_phi_ln165_phi_fu_135_p4 = phi_ln165_reg_132;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_count_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_count_1 = count_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_im_V_ce0 = 1'b1;
    end else begin
        buf_im_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln165_fu_165_p2) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_im_V_we0 = 1'b1;
    end else begin
        buf_im_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_re_V_ce0 = 1'b1;
    end else begin
        buf_re_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln165_reg_280) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_re_V_we0 = 1'b1;
    end else begin
        buf_re_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln165_fu_165_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_out_ap_vld = 1'b1;
    end else begin
        count_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln165_fu_165_p2) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln165_fu_165_p2) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TREADY = 1'b1;
    end else begin
        in_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln176_fu_171_p2 = (ap_sig_allocacmp_count_1 + 11'd1);

assign and_ln165_fu_165_p2 = (xor_ln165_1_fu_159_p2 & ap_phi_mux_phi_ln165_phi_fu_135_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'd1 == and_ln165_fu_165_p2) & (in_stream_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'd1 == and_ln165_fu_165_p2) & (in_stream_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'd1 == and_ln165_fu_165_p2) & (in_stream_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'd1 == and_ln165_fu_165_p2) & (in_stream_TVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buf_im_V_address0 = zext_ln161_fu_177_p1;

assign buf_im_V_d0 = 40'd0;

assign buf_re_V_address0 = zext_ln161_reg_284;

assign buf_re_V_d0 = $signed(select_ln1349_reg_289);

assign count_out = count_fu_76;

assign select_ln1349_fu_250_p3 = ((tmp_19_fu_202_p3[0:0] == 1'b1) ? sub_ln1349_1_fu_230_p2 : zext_ln1349_1_fu_246_p1);

assign sub_ln1349_1_fu_230_p2 = (18'd0 - zext_ln1349_fu_226_p1);

assign sub_ln1349_fu_210_p2 = (40'd0 - t_V_fu_194_p3);

assign t_V_fu_194_p3 = {{trunc_ln884_fu_190_p1}, {16'd0}};

assign tmp_19_fu_202_p3 = in_stream_TDATA[32'd23];

assign tmp_fu_151_p3 = ap_sig_allocacmp_count_1[32'd10];

assign trunc_ln1349_1_fu_216_p4 = {{sub_ln1349_fu_210_p2[39:23]}};

assign trunc_ln1349_2_fu_236_p4 = {{in_stream_TDATA[23:7]}};

assign trunc_ln884_fu_190_p1 = in_stream_TDATA[23:0];

assign xor_ln165_1_fu_159_p2 = (tmp_fu_151_p3 ^ 1'd1);

assign xor_ln165_fu_258_p2 = (in_stream_TLAST ^ 1'd1);

assign zext_ln1349_1_fu_246_p1 = trunc_ln1349_2_fu_236_p4;

assign zext_ln1349_fu_226_p1 = trunc_ln1349_1_fu_216_p4;

assign zext_ln161_fu_177_p1 = ap_sig_allocacmp_count_1;

always @ (posedge ap_clk) begin
    zext_ln161_reg_284[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //EQ_EQ_Pipeline_VITIS_LOOP_165_1
