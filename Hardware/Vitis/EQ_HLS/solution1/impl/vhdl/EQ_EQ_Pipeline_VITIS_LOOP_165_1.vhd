-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity EQ_EQ_Pipeline_VITIS_LOOP_165_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    buf_re_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_re_V_ce0 : OUT STD_LOGIC;
    buf_re_V_we0 : OUT STD_LOGIC;
    buf_re_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    buf_im_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_im_V_ce0 : OUT STD_LOGIC;
    buf_im_V_we0 : OUT STD_LOGIC;
    buf_im_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    count_out : OUT STD_LOGIC_VECTOR (10 downto 0);
    count_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of EQ_EQ_Pipeline_VITIS_LOOP_165_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal and_ln165_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal phi_ln165_reg_132 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln165_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln161_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1349_fu_250_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln1349_reg_289 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln165_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_phi_ln165_phi_fu_135_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal count_fu_76 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln176_fu_171_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_count_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln165_1_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln884_fu_190_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_V_fu_194_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln1349_fu_210_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1349_1_fu_216_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1349_fu_226_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1349_2_fu_236_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_fu_202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1349_1_fu_230_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1349_1_fu_246_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component EQ_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component EQ_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    count_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_const_lv1_1 = and_ln165_fu_165_p2) and (ap_start_int = ap_const_logic_1))) then 
                    count_fu_76 <= add_ln176_fu_171_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    count_fu_76 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln165_reg_280 <= and_ln165_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln165_fu_165_p2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                phi_ln165_reg_132 <= xor_ln165_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln165_fu_165_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln1349_reg_289 <= select_ln1349_fu_250_p3;
                    zext_ln161_reg_284(10 downto 0) <= zext_ln161_fu_177_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln161_reg_284(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln176_fu_171_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_count_1) + unsigned(ap_const_lv11_1));
    and_ln165_fu_165_p2 <= (xor_ln165_1_fu_159_p2 and ap_phi_mux_phi_ln165_phi_fu_135_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_stream_TVALID, and_ln165_fu_165_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_lv1_1 = and_ln165_fu_165_p2) and (in_stream_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_TVALID, and_ln165_fu_165_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_lv1_1 = and_ln165_fu_165_p2) and (in_stream_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_TVALID, and_ln165_fu_165_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_lv1_1 = and_ln165_fu_165_p2) and (in_stream_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in_stream_TVALID, and_ln165_fu_165_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_lv1_1 = and_ln165_fu_165_p2) and (in_stream_TVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln165_fu_165_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_lv1_0 = and_ln165_fu_165_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_phi_ln165_phi_fu_135_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, phi_ln165_reg_132, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_phi_mux_phi_ln165_phi_fu_135_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_phi_ln165_phi_fu_135_p4 <= phi_ln165_reg_132;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_count_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, count_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_count_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_count_1 <= count_fu_76;
        end if; 
    end process;

    buf_im_V_address0 <= zext_ln161_fu_177_p1(10 - 1 downto 0);

    buf_im_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_im_V_ce0 <= ap_const_logic_1;
        else 
            buf_im_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_im_V_d0 <= ap_const_lv40_0;

    buf_im_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln165_fu_165_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln165_fu_165_p2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_im_V_we0 <= ap_const_logic_1;
        else 
            buf_im_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_re_V_address0 <= zext_ln161_reg_284(10 - 1 downto 0);

    buf_re_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_re_V_ce0 <= ap_const_logic_1;
        else 
            buf_re_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        buf_re_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1349_reg_289),40));


    buf_re_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln165_reg_280, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln165_reg_280) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_re_V_we0 <= ap_const_logic_1;
        else 
            buf_re_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    count_out <= count_fu_76;

    count_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln165_fu_165_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln165_fu_165_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_out_ap_vld <= ap_const_logic_1;
        else 
            count_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, in_stream_TVALID, and_ln165_fu_165_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln165_fu_165_p2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln165_fu_165_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln165_fu_165_p2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_TREADY <= ap_const_logic_1;
        else 
            in_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1349_fu_250_p3 <= 
        sub_ln1349_1_fu_230_p2 when (tmp_19_fu_202_p3(0) = '1') else 
        zext_ln1349_1_fu_246_p1;
    sub_ln1349_1_fu_230_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln1349_fu_226_p1));
    sub_ln1349_fu_210_p2 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(t_V_fu_194_p3));
    t_V_fu_194_p3 <= (trunc_ln884_fu_190_p1 & ap_const_lv16_0);
    tmp_19_fu_202_p3 <= in_stream_TDATA(23 downto 23);
    tmp_fu_151_p3 <= ap_sig_allocacmp_count_1(10 downto 10);
    trunc_ln1349_1_fu_216_p4 <= sub_ln1349_fu_210_p2(39 downto 23);
    trunc_ln1349_2_fu_236_p4 <= in_stream_TDATA(23 downto 7);
    trunc_ln884_fu_190_p1 <= in_stream_TDATA(24 - 1 downto 0);
    xor_ln165_1_fu_159_p2 <= (tmp_fu_151_p3 xor ap_const_lv1_1);
    xor_ln165_fu_258_p2 <= (in_stream_TLAST xor ap_const_lv1_1);
    zext_ln1349_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1349_2_fu_236_p4),18));
    zext_ln1349_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1349_1_fu_216_p4),18));
    zext_ln161_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_count_1),64));
end behav;
